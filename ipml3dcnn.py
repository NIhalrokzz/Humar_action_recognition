# -*- coding: utf-8 -*-
"""ipml3dcnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v0QnQcXEa5LNBxaggJ4Ds_22-8jXK9pu
"""

!gdown 12LANSt9YZUTIcV_a_T5ttONN7Fi3B65U

!unzip /content/HMDB51.zip -d /content/

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
from tensorflow.keras.utils import to_categorical
import cv2
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.models import Sequential
from tensorflow.keras.layers import Conv3D,Dropout, MaxPooling3D, Flatten, Dense,BatchNormalization

facial_actions_labels = {"smile":0, "laugh":1, "chew":2, "talk":3, "smoke":4, "eat":5, "drink":6}
body_movements_labels = {"cartwheel":0, "clap_hands":1, "climb":2, "climb_stairs":3, "dive":4, "fall_on_the_floor":5, "backhand_flip":6, "handstand":7, "jump":8, "pull_up":9, "push_up":10, "run":11, "sit_down":12, "sit_up":13, "somersault":14, "stand_up":15, "turn":16, "walk":17, "wave":18}
body_object_labels = {"brush_hair":0, "catch":1, "draw_sword":2, "dribble":3, "golf":4, "hit_something":5, "kick_ball":6, "pick":7, "pour":8, "push_something":9, "ride_bike":10, "ride_horse":11, "shoot_ball":12, "shoot_bow":13, "shoot_gun":14, "swing_baseball_bat":15, "sword_exercise":16, "throw":17}
human_interaction_labels = {"fencing":0, "hug":1, "kick":2, "kiss":3, "punch":4, "shake_hands":5}

data_dir = "/kaggle/input/hmdb51/HMDB51"

data=[]
labels=[]
train_data = []
train_labels = []
test_data = []
test_labels = []

for key,value in facial_actions_labels.items():
    count=0
    for video_folder in os.listdir(os.path.join(data_dir, key)):
        video_path = os.path.join(data_dir, key, video_folder)
        frames = []
        if(len(os.listdir(video_path))<11):
            continue
        count1=0
        for frame_file in sorted(os.listdir(video_path)):
            frame_path = os.path.join(video_path, frame_file)
            frame = cv2.imread(frame_path)
            frame = cv2.resize(frame, (128, 128)) 
            frames.append(frame)
            if(count1>9):
                break;
            count1+=1;
        if(count<90):
            train_data.append(np.array(frames))
            train_labels.append(value)
        else:
            test_data.append(np.array(frames))
            test_labels.append(value)
        count+=1

print(len(train_data),len(test_data))

train_data, train_labels = shuffle(train_data, train_labels)
test_data, test_labels = shuffle(test_data, test_labels)

train_data = np.array(train_data)
test_data = np.array(test_data)

y_train = to_categorical(np.asarray(train_labels))

tf.compat.v1.reset_default_graph()

# Import necessary libraries
import tensorflow as tf
from keras.models import Sequential
from tensorflow.keras.layers import Conv3D,Dropout, MaxPooling3D, Flatten, Dense,BatchNormalization
tf.compat.v1.reset_default_graph()
model = Sequential()
model.add(Conv3D(32, (3,3,3), activation='relu', input_shape=(11, 128, 128, 3)))
model.add(MaxPooling3D(pool_size=(1, 2, 2)))
model.add(BatchNormalization())
model.add(Conv3D(64, (3,3,3), activation='relu'))
model.add(MaxPooling3D(pool_size=(1, 2, 2)))
model.add(BatchNormalization())
model.add(Conv3D(128, (3,3,3), activation='relu'))
model.add(MaxPooling3D(pool_size=(1, 2, 2)))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dense(512))
model.add(Dense(512))
# model.add(Dense(1024))
# model.add(Dropout(0.25))
model.add(Dense(len(human_interaction_labels), activation='softmax')) 
model.compile(
        loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"]
    )

tf.compat.v1.reset_default_graph()# Define the C3D model
model = Sequential()

model.add(Conv3D(16, (3,3,3), activation='relu', padding='same', input_shape=(11, 128, 128, 3)))
model.add(MaxPooling3D((1,2,2), padding='same'))
model.add(BatchNormalization())
model.add(Conv3D(32, (3,3,3), activation='relu', padding='same'))
model.add(MaxPooling3D((1,2,2), padding='same'))
model.add(BatchNormalization())
model.add(Conv3D(64, (3,3,3), activation='relu', padding='same'))
model.add(MaxPooling3D((1,2,2), padding='same'))
model.add(BatchNormalization())
model.add(Conv3D(128, (3,3,3), activation='relu', padding='same'))
model.add(MaxPooling3D((1,2,2), padding='same'))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.25))

model.add(Dense(7, activation='softmax'))


model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

import keras
filepath = '/tmp/checkpoint'

checkpoint = keras.callbacks.ModelCheckpoint(
        filepath, save_weights_only=True, save_best_only=True, verbose=1
    )

model.summary()

history = model.fit(
        train_data,
        y_train,
        epochs=20,
        callbacks=[checkpoint],
    )

#loss graph with no of epochs
losss = history.history['loss']
plt.plot(losss)

#accuracygraph
accu = history.history['accuracy']
plt.plot(accu)

count=0
for i in range(len(test_data)):
    print(i)
    probabilities = model.predict(np.asarray([test_data[i]]))[0]
    itemindex = np.where(probabilities==np.max(probabilities))
    print(itemindex)
    prediction = itemindex[0][0]
    if(test_labels[i]==prediction):
        count+=1
print("total correct videos prediction:",count)
print("Accuracy:",count/len(test_data))

model.save("3dcnn.h5")

from IPython.display import FileLink
FileLink(r'3dcnn.h5')

!wget https://drive.google.com/u/1/uc?id=1qeh2ohYOaJTmckRR2nRkUXhAZBTAI-zT&export=download&confirm=t&uuid=3747862c-d053-4558-8cbf-7aa45df217c4&at=AKKF8vwYYqWWJ7agC6i2-xlRsG2-:1682741215959

from tensorflow import keras
best = keras.models.load_model('/kaggle/input/3dcnnmodel/3dcnn.h5')

facial_actions= ["smile", "laugh", "chew", "talk", "smoke", "eat", "drink"]

!pip uninstall opencv-python-headless -y 

!pip install opencv-python --upgrade

def update(num):
    for frame in test_data[num]:
    # Display the frame
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        plt.imshow(img)

import random
from matplotlib.animation import FuncAnimation
#randomto test
def test_random():
    num = random.randint(1,len(test_data))
    animation = FuncAnimation(plt.gcf(), update, interval=25)
    plt.show()
    result = best.predict(np.asarray([test_data[num]]))[0]
    itemindex = np.where(result==np.max(result))
    prediction = itemindex[0][0]
    print("probability: "+str(np.max(result)*100) + "%\nPredicted class : ", facial_actions[prediction])

test_random()