# -*- coding: utf-8 -*-
"""traditional_ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1waRMD5PE4pqF-N_WzqVppHZK56Qxt9J_
"""

!gdown 1wbHo6oi_eNn9vMZcAHNLCW9aBM5pCOQo

!unzip /content/impl.zip -d /content/

import pandas as pd
import glob
import cv2
from PIL import Image
import numpy as np

train_csv = pd.read_csv("Human Action Recognition/Training_set.csv")

train_fol = glob.glob("Human Action Recognition/train/*")

filename = train_csv['filename']

situation = train_csv['label']

list_of_class=train_csv['label'].factorize()[1]

total_class={"sitting":0,"using_laptop":1,"hugging":2 ,"sleeping" :3,"drinking":4,"clapping" :5,"dancing":6,
"cycling":7,"calling":8,"laughing":9,"eating" :10,"fighting":11,"listening_to_music":12,"running":13,"texting":14}

img_data = []
test_data=[]
img_label = []
test_label=[]



for i in list_of_class:
  df_new = train_csv[train_csv['label'] == i]
  filename = df_new['filename']
  situation = df_new['label']
  cout=0
  length = len(filename)
  for i in filename.index:
    t = 'Human Action Recognition/train/' + filename[i]
    temp_img = Image.open(t)
    temp_img = np.array(temp_img)  # Convert PIL.Image.Image to numpy array
    gray_image = cv2.cvtColor(temp_img, cv2.COLOR_BGR2GRAY)
    gray_image = cv2.resize(gray_image, (200, 200))
    if(cout<100):
      test_data.append(np.asarray(gray_image))
      test_label.append(total_class[situation[i]])
      cout+=1
    else:
      img_data.append(np.asarray(gray_image))
      img_label.append(total_class[situation[i]])

print(len(test_data), len(test_label))

train_x = np.array(img_data).astype("float32") 
test_x = np.array(test_data).astype("float32")
# Normalization
train_x = train_x/255.0
test_x = test_x/255.0

print(test_x.shape, len(test_x))

from sklearn.model_selection import train_test_split
from skimage.feature import hog

feature_train = []
feature_test = []

for img in train_x:
      hog_features = hog(img, orientations=8, pixels_per_cell=(16, 16),
                          cells_per_block=(1, 1), visualize=False,
                          transform_sqrt=True, block_norm='L2-Hys')
      feature_train.append(hog_features)

for img in test_x:
      hog_features = hog(img, orientations=8, pixels_per_cell=(16, 16),
                          cells_per_block=(1, 1), visualize=False,
                          transform_sqrt=True, block_norm='L2-Hys')
      feature_test.append(hog_features)

print(img_label)

X = np.array(feature_train)
y = np.array(img_label)

print(X.shape, y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix

# train SVM classifier
model1 = svm.SVC(kernel='linear')
model1.fit(X_train, y_train)

# make predictions on test data
y_pred = model1.predict(X_test)

# evaluate performance using accuracy score and confusion matrix
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

# Train one-vs-one SVM
model2 = svm.SVC(decision_function_shape='ovo')
model2.fit(X_train, y_train)

y_pred = model2.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

from sklearn.neighbors import KNeighborsClassifier

# Flatten the image data
X_train_flat = X_train.reshape(X_train.shape[0], -1)
X_test_flat = X_test.reshape(X_test.shape[0], -1)

# Initialize the KNN classifier with k=5
model3 = KNeighborsClassifier(n_neighbors=13)

# Train the classifier on the training data
model3.fit(X_train_flat, y_train)

# Evaluate the classifier on the test data
accuracy = model3.score(X_test_flat, y_test)
print('Accuracy:', accuracy)

from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest classifier with 1000 trees
model4 = RandomForestClassifier(n_estimators=1000)

# Train the classifier on the training data
model4.fit(X_train, y_train)

# Evaluate the classifier on the test data
accuracy = model4.score(X_test, y_test)
print('Accuracy:', accuracy)

from sklearn.naive_bayes import GaussianNB


# Initialize the Naive Bayes classifier
model5 = GaussianNB()

# Train the classifier on the training data
model5.fit(X_train, y_train)

# Evaluate the classifier on the test data
accuracy = model5.score(X_test, y_test)
print('Accuracy:', accuracy)

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.svm import SVC

# Shuffle the data
indices = np.arange(len(X_train))
np.random.shuffle(indices)
X_train_k = X_train[indices]
y_train_k = y_train[indices]

# Use k-means clustering to extract features from the image data
kmeans = KMeans(n_clusters=15)
X_kmeans = kmeans.fit_transform(X_train_k)

# Scale the feature data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_kmeans)
X_test_scaled = scaler.transform(kmeans.transform(X_test))

# Train a support vector machine classifier on the feature data
clf = SVC(kernel='rbf', gamma='auto')
model6 = Pipeline([('scaler', scaler), ('clf', clf)])
model6.fit(X_scaled, y_train_k)

# Evaluate the classifier on the training data
y_pred = model6.predict(X_test_scaled)
acc = accuracy_score(y_test, y_pred)
print('Accuracy:', acc)

test_x = np.array(feature_test)
test_y = np.array(test_label)

print(test_x.shape)

print(test_y.shape)

print(test_y)

from sklearn.metrics import f1_score

y_pred = model1.predict(test_x)
acc = accuracy_score(test_y, y_pred)
f1 = f1_score(test_y, y_pred, average='weighted')

print("Linear SVM : Accuracy : {}, F1 score : {}".format(acc, f1))

y_pred = model2.predict(test_x)
acc = accuracy_score(test_y, y_pred)
f1 = f1_score(test_y, y_pred, average='weighted')

print("MultiClass SVM : Accuracy : {}, F1 score : {}".format(acc, f1))

y_pred = model3.predict(test_x)
acc = accuracy_score(test_y, y_pred)
f1 = f1_score(test_y, y_pred, average='weighted')

print("KNN Accuracy : {}, F1 score : {}".format(acc, f1))

y_pred = model4.predict(test_x)
acc = accuracy_score(test_y, y_pred)
f1 = f1_score(test_y, y_pred, average='weighted')

print("Random Forest : Accuracy : {}, F1 score : {}".format(acc, f1))

y_pred = model5.predict(test_x)
acc = accuracy_score(test_y, y_pred)
f1 = f1_score(test_y, y_pred, average='weighted')

print("Naive Bais : Accuracy : {}, F1 score : {}".format(acc, f1))

test_X_kmeans = kmeans.fit_transform(test_x)
test_X_scaled = scaler.fit_transform(test_X_kmeans)
y_pred = model6.predict(test_X_scaled)
acc = accuracy_score(test_y, y_pred)
f1 = f1_score(test_y, y_pred, average='weighted')

print("Kmeans : Accuracy : {}, F1 score : {}".format(acc, f1))

